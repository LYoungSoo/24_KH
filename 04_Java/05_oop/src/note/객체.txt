[객체(Object)]
 - 현실 : 식별 가능한 모든 것(속성 + 기능을 지님)
 - Java : 클래스에 정의된 내용대로 new 연산자에 의해서 Heap 메모리 영역에 생성된 것

[ 객체지향언어 || 객체지향프로그래밍(OOP) ]
 - 현실 세계가 객체로 이루어져 객체간의 상호작용으로 사건이 발생한다
 - 라는 패러다임을 컴퓨터로 옮겨놓은 것 / 옮겨 놓은 프로그래밍 방식

[클래스 (class)]
 - 객체의 속성(필드), 기능(메서드)을 정의한 것(문서 / 설계도)

[객체 지향 언어의 특징]
 1. 추상화
 2. 캡슐화
 3. 상속
 4. 다형성

[추상화]
- 구체적인 것을 제거하고, 공통적인 것만 남겨두는 것 ==> 유연성 확보

[캡슐화]
 1) 속성, 기능을 하나로 묶어서 관리            ==> class {}
 2) 데이터(속성 == 필드)의 직접 접근 제한 원칙
    ==> 필드에는 private 접근 제한자를 붙임   ===> 필드에 대한 간접 접근 방법(getter / setter) 제공

[객체 생성 메모리 구조]
 1          3  2
 Nation n2  =  new Nation();
 1) Stack 메모리 영역에 Nation 자료형 변수 n2를 선언
    - Nation 자료형 변수 == Nation 객체를 참조하는 참조형 변수
 2) Heap 메모리 영역에 Nation 클래스에 정의된 내용을 토대로 객체 생성(할당)
    - new 연산자 : Heap 메모리 영역에 새로운 객체 생성
 3) 생성된 객체의 시작 주소를 n2 변수에 대입하여 참조할 수 있게 함
    - n2 자료형 == Nation
    생성된 객체 자료형 == Nation
    같은 자료형이므로 대입 가능

[Object와 Instance 차이]
 ex) 현실의 존재하는 실제 물체를 객체지향 언어를 이용해 코드로 작성해서 new 연산자를 통해 객체로 생성
     ==> 생성된 객체는 진짜 객체?? NO

     현실에 존재하는 진짜 객체 : Object
     컴퓨터에 생성된 객체      : Instance
     + class까지 묶어서 차이점 잘 구분하기