다형성 : 다양한 형태를 지니는 성질 ==> 어떤 한 가지가 여러 모습을 갖는다는 개념

1. 오버로딩 : 하나의 '메서드 이름'으로 매개변수에 따라 다르게 동작하는 메서드를 만듦.
             ==> 동일한 동작을 요구할 때, 매개변수(갯수, 자료형)가 다른 경우를 유연하게 대체

2. 객체 다형성 : 상속 관계에서 '참조 변수'의 자료형에 따라 참조 당하는 '객체'의 자료형이 변하는 것처럼 보임

    - 업 캐스팅   ==> 부모 타입의 참조 변수가 자식 타입의 객체를 참조하여
                    참조 당하는 자식 객체의 전체가 아니라 내부에 존재하는 부모 객체만 참조하게 됨
                  ===> 자식 객체가 부모 객체로 변한 것처럼 보임

    - 다운 캐스팅 ==> 업 캐스팅 상태의 [부모] 참조변수 = (자식) 객체; 에서
                      참조 변수의 타입을 (자식)으로 강제 형변환 하여
                      (자식) 참조 변수 = (자식) 객체; 형태로 변경하여
                      부모 부분만 참조하다가 다시 자식 객체 전체를 참조하게 바뀜
                  ===> 부모 객체가 자식 객체로 변한 것처럼 보임

추상화
자식마다 다 다른 기능이 있으니까 abstract를 달아서
추상메서드로 만들어서
상속받는 자식이 강제로 overriding하게 만들어서
유연하게 대처할 수 있게 만들어서
일반메서드도 포함할 수 있게 해놔서
일부 기능은 오버라이딩 없이 정상적으로 작동하게 해서
이게 인터페이스랑 달라서
extends로 호출해서

인터페이스
implements로 호출해서
진짜 모든 기능을 다 오버라이딩 하도록 해서
인터페이스는 이름만 있고 내용은 다 '비어'있어서
진짜로 아무것도 없어서