<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!--
	Mapper 인터페이스와 연결하는 방법 : 
	namespace 속성 값으로 Mapper 인터페이스의 패키지명 + 인터페이스명 작성
-->
<mapper namespace="edu.kh.project.board.mapper.BoardMapper">

	<!--
		<resultMap> 태그
		1) 조회된 컬럼명과 DTO 필드명이 일치하지 않을 때 매핑 시키는 역할
			ex) 컬럼명 : BOARD_NO
				필드명 : no
				<result property="no" column="BOARD_NO" />
		
		** 이거 사용! **
		2) <collection> 태그를 추가 작성하여 여러 행 조회 결과를 가지는
		   다른 <select> 수행 후, 그 결과를 지정된 DTO 필드에 대입(매핑) 
	-->
	<!--
		type : 매핑할 DTO의 경로 또는 별칭
		id   : resultMap 태그를 식별할 이름
	-->
	<resultMap type="Board" id="board_rm">
	
		<!-- id 태그 : PK 역할 필드, 컬럼 작성 태그(필수 작성) -->
		<id property="boardNo" column="BOARD_NO"/>
		
		<!-- [collection 태그]
			select로 조회된 결과를 컬렉션(List)에 담아
			지정된 필드에 세팅
			
			property : List를 담을 DTO의 필드명
			select : 실행할 select의 id
			column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
			javaType : List(컬렉션)의 타입을 지정
			ofType : List(컬렉션)의 제네릭(타입 제한) 지정
		-->
		<collection
			property="imageList"
			select="selectImageList"
			column="BOARD_NO"
			javaType="java.util.ArrayList"
			ofType="BoardImg"
		/>
			
		<collection
			property="commentList"
			select="selectCommentList"
			column="BOARD_NO"
			javaType="java.util.ArrayList"
			ofType="Comment"
		/>
	</resultMap>
	

	<!-- 1. boardCode가 일치하는 게시글의 전체 개수 조회 -->
	<!-- 	(조건 : 삭제되지 않은 글만 카운트!) -->
	<select id="getListCount" resultType="_int">
		SELECT	COUNT(*)
		FROM	"BOARD"
		WHERE	BOARD_CODE = #{boardCode}
		AND		BOARD_DEL_FL = 'N'
	</select>

	<!--
		<![CDATA["문자열"]]>
		- 태그 내부 "문자열" 에 작성된 특수 기호를
		  마크업 언어로 해석하지 말고
		  문자 그대로 인식하라는 태그(순수 텍스트임을 지정)
	-->
	<!-- 3. 지정된 페이지 분량의 게시글 목록 조회 -->
	<select id="selectBoardList" resultType="Board">
		SELECT	ROW_NUMBER() OVER (ORDER BY BOARD_NO ASC) "RNUM", 
						BOARD_NO, BOARD_TITLE, READ_COUNT, MEMBER_NICKNAME,
						(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO AND C.COMMENT_DEL_FL = 'N'
						) AS "COMMENT_COUNT",
						(SELECT COUNT(*) FROM "BOARD_LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) AS "LIKE_COUNT",
						
						<![CDATA[
						CASE
							WHEN CURRENT_DATE - BOARD_WRITE_DATE < 1 / 24 / 60
							THEN  FLOOR((CURRENT_DATE - BOARD_WRITE_DATE) * 24 * 60 * 60) || '초 전'
							
							WHEN CURRENT_DATE - BOARD_WRITE_DATE < 1 / 24
							THEN  FLOOR((CURRENT_DATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
							
							WHEN CURRENT_DATE - BOARD_WRITE_DATE < 1
							THEN  FLOOR((CURRENT_DATE - BOARD_WRITE_DATE) * 24) || '시간 전'
							
							ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
						END AS "BOARD_WRITE_DATE"
						]]>
						,
						(SELECT	IMG_PATH || IMG_RENAME
						 FROM		BOARD_IMG I
						 WHERE 	IMG_ORDER = 0
						 AND 		I.BOARD_NO = B.BOARD_NO
						 ) AS THUMBNAIL
		FROM	"BOARD" B
		JOIN	"MEMBER" M ON (B.MEMBER_NO = M.MEMBER_NO)
		WHERE	BOARD_DEL_FL = 'N'
		AND		BOARD_CODE = #{boardCode}
		ORDER BY RNUM DESC
	</select>
	
	<!-- 게시글 상세 조회 -->
	<!-- 조회 결과를 board_rm 에 저장된 Type == Board에 저장하고
		 + collection 태그를 수행해서 selectImageList 조회 후 Board.imageList 필드에 저장
	-->
	<select id="selectDetail" resultMap="board_rm">
		SELECT	BOARD_NO,
				BOARD_TITLE,
				BOARD_CONTENT,
				BOARD_CODE,
				READ_COUNT,
				B.MEMBER_NO,
				MEMBER_NICKNAME,
				PROFILE_IMG,
				TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS')
					AS BOARD_WRITE_DATE,
				TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS')
					AS BOARD_UPDATE_DATE,
				(	SELECT	COUNT(*)
					FROM BOARD_LIKE L
					WHERE L.BOARD_NO = #{boardNo}
				) AS LIKE_COUNT,
				(	SELECT	IMG_PATH || IMG_RENAME
					FROM	BOARD_IMG I
					WHERE	I.BOARD_NO = #{boardNo}
					AND		IMG_ORDER = 0
				) AS THUMBNAIL,
				(	SELECT	COUNT(*)
					FROM 	"BOARD_LIKE"
					WHERE	BOARD_NO  = #{boardNo}
					AND		MEMBER_NO = #{memberNo}
				) AS LIKE_CHECK
		FROM	"BOARD" B
		JOIN	"MEMBER" M ON (B.MEMBER_NO = M.MEMBER_NO)
		WHERE	BOARD_NO = #{boardNo}
		AND		BOARD_CODE = #{boardCode}
	</select>
	
	<!-- 특정 게시글의 이미지를 order 순서로 조회 -->
	<select id="selectImageList" resultType="BoardImg">
		SELECT	*
		FROM	BOARD_IMG
		WHERE	BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER ASC
	</select>
	
	<!-- 특정 게시글의 댓글 목록 조회 + 계층형 쿼리 -->
	<select id="selectCommentList" resultType="Comment">
		SELECT LEVEL, C.* FROM
			(SELECT COMMENT_NO, COMMENT_CONTENT,
			    TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
			    BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_COMMENT_NO, COMMENT_DEL_FL
			FROM "COMMENT"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE BOARD_NO = #{boardNo}) C
		WHERE COMMENT_DEL_FL = 'N'
		OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
						WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
						AND COMMENT_DEL_FL = 'N')
		START WITH PARENT_COMMENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
		ORDER SIBLINGS BY COMMENT_NO
	</select>
	
	<!-- 조회 수 1 증가 -->
	<update id="updateReadCount">
		UPDATE "BOARD"
		SET		READ_COUNT = READ_COUNT + 1
		WHERE	BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시글 좋아요 체크 or 해제 -->
	<!-- 좋아요 여부 검사 -->	<!-- 누른적 없으면 0, 있으면 1 -->
	<select id="checkBoardLike" resultType="_int">
		SELECT	COUNT(*)
		FROM	"BOARD_LIKE"
		WHERE	MEMBER_NO = #{memberNo}
		AND		BOARD_NO  = #{boardNo}
	</select>
	
	<!-- 좋아요 테이블 INSERT  -->
	<insert id="insertBoardLike">
		INSERT	INTO "BOARD_LIKE" (MEMBER_NO, BOARD_NO)
		VALUES	(#{memberNo}, #{boardNo})
	</insert>
	
	<!-- 좋아요 테이블 DELETE -->
	<delete id="deleteBoardLike">
		DELETE
		FROM	"BOARD_LIKE"
		WHERE	MEMBER_NO = #{memberNo}
		AND		BOARD_NO  = #{boardNo}
	</delete>
	
	<!-- 좋아요 개수 조회 -->
	<select id="getLikeCount" resultType="_int">
		SELECT	COUNT(*)
		FROM	"BOARD_LIKE"
		WHERE	BOARD_NO = #{boardNo}
	</select>
	
	<!-- DB에서 모든 게시판 종류를 조회 -->
	<select id="selectBoardTypeList" resultType="map">
		SELECT	BOARD_CODE "boardCode",
				BOARD_NAME "boardName"
		FROM	"BOARD_TYPE"
		ORDER BY BOARD_CODE ASC
	</select>

</mapper>
